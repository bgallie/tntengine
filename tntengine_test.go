// This is free and unencumbered software released into the public domain.
// See the UNLICENSE file for details.

package tntengine

import (
	"math/big"
	"reflect"
	"testing"
)

func TestTntEngine_Left(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "ttel1",
			want: tntMachine.left,
		},
	}
	for _, tt := range tests {
		e := tntMachine
		t.Run(tt.name, func(t *testing.T) {
			if got := e.Left(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Left() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_Right(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "tter1",
			want: tntMachine.right,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.Right(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Right() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_CounterKey(t *testing.T) {
	var tntMachine TntEngine
	tests := []struct {
		name string
		key  string
		want string
	}{
		{
			name: "ttec1",
			key:  "SecretKey",
			want: "30a7c225e88daa83416dee1970dc58b81f0c3771d6eb801ce23b49439357cc16",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tntMachine.Init([]byte(tt.key))
			if got := tntMachine.CounterKey(); got != tt.want {
				t.Errorf("TntEngine.CounterKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_Index(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	tntMachine.SetIndex(iCnt)
	tests := []struct {
		name     string
		wantCntr *big.Int
	}{
		{
			name:     "ttei1",
			wantCntr: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if gotCntr := e.Index(); !reflect.DeepEqual(gotCntr, tt.wantCntr) {
				t.Errorf("TntEngine.Index() = %v, want %v", gotCntr, tt.wantCntr)
			}
		})
	}
}

func TestTntEngine_SetIndex(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	type args struct {
		iCnt *big.Int
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		{
			name: "ttesi1",
			args: args{iCnt},
			want: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetIndex(tt.args.iCnt)
			if got := e.Index(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Index() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_SetEngineType(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	type args struct {
		engineType string
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "tteset1",
			args: args{"E"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetEngineType(tt.args.engineType)
			if got := e.engineType; got != tt.args.engineType {
				t.Errorf("TntEngine.SetEngineType() = %v, want %v", got, tt.args.engineType)
			}
		})
	}
}

func TestTntEngine_Engine(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetIndex(BigZero)
	cnter := new(Counter)
	cnter.SetIndex(BigZero)
	tests := []struct {
		name string
		want []Crypter
	}{
		{
			name: "tnte1",
			want: []Crypter{
				new(Rotor).New(1783, 1558, 1333, []byte{
					114, 79, 56, 56, 38, 221, 195, 193, 1, 152, 237, 222, 72, 15, 248, 170,
					200, 121, 115, 189, 105, 122, 160, 174, 245, 97, 198, 155, 47, 59, 213, 17,
					170, 91, 203, 144, 149, 244, 108, 38, 67, 99, 163, 4, 116, 24, 62, 141,
					188, 225, 239, 53, 6, 191, 110, 228, 68, 254, 183, 76, 173, 134, 73, 73,
					138, 181, 68, 125, 202, 170, 252, 224, 172, 169, 204, 195, 55, 24, 51, 71,
					110, 19, 174, 68, 1, 88, 214, 121, 159, 117, 28, 251, 197, 10, 2, 107,
					94, 160, 161, 225, 203, 17, 180, 36, 11, 194, 193, 254, 156, 52, 153, 135,
					183, 176, 172, 214, 39, 79, 32, 192, 61, 53, 34, 17, 93, 214, 54, 243,
					122, 133, 64, 3, 26, 149, 220, 69, 194, 117, 141, 186, 178, 158, 172, 241,
					180, 20, 129, 6, 246, 46, 230, 127, 43, 245, 87, 181, 203, 71, 163, 90,
					193, 112, 135, 86, 135, 154, 113, 106, 224, 220, 106, 232, 144, 56, 102, 49,
					122, 180, 110, 205, 220, 98, 219, 111, 179, 21, 49, 50, 117, 80, 70, 107,
					140, 180, 35, 233, 40, 176, 180, 18, 76, 177, 105, 179, 30, 117, 146, 6,
					123, 146, 74, 136, 109, 83, 79, 23, 0, 217, 108, 66, 4, 232, 7, 185,
					39, 28, 28, 147, 238, 225, 224, 0, 204, 118, 111, 164, 7, 124, 85, 228,
					188, 185, 222, 52, 61, 80, 215, 250, 48, 227, 205, 151, 157, 234, 8, 0}),
				new(Rotor).New(1789, 60, 444, []byte{
					153, 247, 84, 55, 230, 25, 164, 59, 126, 236, 221, 4, 209, 236, 84, 230,
					139, 111, 14, 137, 166, 224, 21, 71, 61, 4, 139, 183, 101, 78, 5, 174,
					94, 15, 206, 125, 202, 48, 228, 146, 191, 224, 132, 235, 224, 60, 18, 57,
					21, 103, 237, 61, 115, 105, 9, 46, 125, 96, 19, 40, 234, 94, 162, 36,
					155, 156, 228, 195, 26, 147, 119, 67, 78, 183, 246, 231, 222, 145, 6, 190,
					126, 78, 213, 77, 221, 175, 94, 244, 14, 196, 166, 126, 139, 161, 110, 91,
					143, 84, 22, 40, 124, 127, 212, 186, 12, 175, 47, 100, 51, 163, 40, 64,
					136, 160, 59, 18, 97, 216, 114, 62, 102, 118, 169, 228, 6, 229, 61, 16,
					65, 68, 16, 25, 29, 16, 169, 152, 135, 33, 22, 248, 163, 25, 132, 250,
					81, 238, 223, 59, 100, 14, 74, 174, 38, 239, 190, 149, 202, 106, 218, 48,
					60, 189, 77, 183, 187, 217, 139, 133, 252, 99, 193, 6, 235, 63, 154, 203,
					245, 38, 127, 1, 18, 89, 188, 156, 120, 13, 25, 35, 4, 61, 216, 68,
					196, 6, 177, 70, 225, 193, 239, 242, 175, 66, 123, 167, 0, 85, 245, 169,
					229, 221, 188, 170, 155, 216, 42, 171, 246, 120, 66, 212, 240, 229, 17, 38,
					243, 158, 234, 198, 60, 131, 116, 199, 143, 189, 155, 32, 154, 157, 202, 124,
					241, 205, 33, 209, 20, 188, 226, 168, 135, 96, 241, 182, 204, 169, 192, 21}),
				new(Permutator).New(256, []byte{
					166, 4, 218, 152, 122, 136, 201, 117, 34, 56, 203, 144, 222, 11, 240, 31,
					187, 185, 165, 83, 237, 75, 62, 247, 5, 244, 130, 200, 72, 164, 242, 77,
					35, 19, 106, 85, 108, 195, 39, 160, 192, 251, 46, 84, 55, 212, 157, 148,
					78, 199, 115, 7, 94, 43, 230, 174, 145, 29, 239, 153, 97, 101, 183, 255,
					105, 234, 50, 10, 69, 232, 45, 248, 73, 231, 211, 198, 113, 37, 61, 238,
					134, 64, 67, 236, 0, 243, 40, 116, 32, 68, 175, 225, 121, 215, 36, 228,
					99, 109, 140, 89, 139, 223, 15, 190, 204, 138, 107, 23, 133, 9, 13, 17,
					1, 245, 147, 220, 210, 191, 98, 127, 226, 254, 217, 132, 44, 250, 146, 3,
					246, 194, 76, 102, 155, 54, 233, 28, 249, 186, 59, 65, 79, 57, 189, 70,
					142, 119, 205, 196, 124, 111, 104, 38, 14, 224, 27, 21, 88, 151, 143, 80,
					100, 91, 92, 221, 82, 86, 74, 8, 193, 126, 235, 131, 216, 208, 178, 172,
					52, 90, 241, 42, 96, 41, 51, 169, 128, 48, 141, 167, 53, 26, 24, 229,
					114, 18, 184, 20, 137, 150, 227, 181, 179, 87, 30, 60, 156, 162, 58, 2,
					123, 120, 103, 158, 125, 168, 170, 202, 176, 118, 22, 135, 197, 159, 214, 129,
					209, 252, 49, 112, 16, 177, 180, 154, 33, 219, 188, 171, 163, 63, 66, 6,
					161, 71, 149, 47, 110, 182, 207, 25, 12, 253, 173, 213, 95, 81, 206, 93}),
				new(Rotor).New(1759, 511, 744, []byte{
					125, 92, 112, 213, 122, 124, 89, 229, 81, 119, 36, 53, 94, 153, 113, 134,
					226, 33, 32, 109, 236, 165, 144, 100, 31, 142, 236, 116, 171, 176, 174, 133,
					113, 146, 199, 181, 52, 24, 82, 110, 182, 98, 169, 172, 244, 140, 85, 200,
					19, 196, 221, 105, 139, 133, 210, 79, 174, 27, 8, 160, 202, 9, 110, 174,
					190, 169, 69, 63, 108, 215, 207, 148, 157, 140, 8, 196, 242, 51, 154, 212,
					192, 187, 242, 22, 235, 129, 169, 39, 228, 158, 156, 89, 56, 96, 132, 217,
					109, 162, 228, 81, 115, 58, 75, 43, 224, 126, 120, 196, 94, 61, 253, 42,
					155, 184, 16, 145, 106, 137, 197, 174, 71, 74, 171, 0, 244, 57, 19, 87,
					189, 234, 53, 143, 93, 241, 66, 2, 201, 195, 227, 140, 52, 59, 32, 8,
					54, 182, 117, 200, 103, 17, 35, 118, 81, 19, 75, 17, 240, 181, 52, 26,
					253, 76, 246, 200, 117, 18, 208, 103, 199, 21, 157, 147, 237, 249, 59, 8,
					211, 57, 24, 82, 0, 232, 47, 78, 12, 192, 245, 173, 174, 27, 24, 144,
					46, 81, 195, 190, 107, 129, 248, 22, 123, 29, 127, 111, 253, 13, 43, 244,
					1, 178, 204, 34, 207, 248, 237, 125, 97, 84, 171, 129, 62, 46, 184, 106,
					61, 190, 172, 242, 168, 59, 146, 26, 175, 204, 56, 67, 241, 16, 144, 54,
					246, 82, 72, 178, 15, 71, 118, 186, 85, 88, 215, 66, 0, 0, 0, 0}),
				new(Rotor).New(1753, 399, 1350, []byte{
					73, 106, 138, 44, 170, 166, 245, 200, 169, 189, 214, 170, 187, 181, 152, 146,
					148, 128, 16, 224, 96, 213, 249, 237, 66, 89, 58, 198, 165, 36, 88, 184,
					82, 212, 85, 151, 106, 107, 46, 77, 241, 194, 149, 223, 137, 16, 194, 238,
					62, 19, 105, 132, 242, 162, 5, 17, 7, 106, 114, 68, 216, 59, 253, 250,
					181, 97, 123, 78, 121, 43, 21, 139, 57, 141, 26, 6, 194, 140, 19, 78,
					69, 187, 108, 132, 74, 193, 154, 47, 23, 211, 42, 71, 35, 12, 18, 49,
					39, 161, 116, 224, 150, 121, 159, 245, 95, 164, 42, 252, 186, 25, 159, 138,
					10, 194, 100, 62, 211, 135, 35, 109, 47, 121, 13, 55, 12, 73, 105, 32,
					98, 164, 132, 67, 179, 175, 221, 101, 10, 242, 84, 59, 184, 90, 80, 1,
					61, 54, 162, 48, 13, 71, 1, 110, 76, 178, 142, 147, 133, 112, 238, 106,
					150, 228, 187, 220, 177, 119, 219, 5, 81, 216, 132, 212, 52, 203, 28, 239,
					135, 241, 14, 163, 69, 2, 191, 68, 66, 197, 179, 106, 223, 202, 6, 231,
					68, 67, 241, 19, 119, 240, 84, 172, 163, 235, 120, 10, 227, 52, 4, 82,
					167, 248, 169, 252, 209, 201, 18, 16, 98, 245, 152, 147, 212, 20, 89, 84,
					77, 235, 145, 83, 123, 173, 85, 119, 107, 49, 37, 41, 1, 33, 192, 193,
					170, 243, 219, 133, 178, 116, 140, 75, 73, 176, 112, 1, 0, 0, 0, 0}),
				new(Permutator).New(256, []byte{
					166, 4, 218, 152, 122, 136, 201, 117, 34, 56, 203, 144, 222, 11, 240, 31,
					187, 185, 165, 83, 237, 75, 62, 247, 5, 244, 130, 200, 72, 164, 242, 77,
					35, 19, 106, 85, 108, 195, 39, 160, 192, 251, 46, 84, 55, 212, 157, 148,
					78, 199, 115, 7, 94, 43, 230, 174, 145, 29, 239, 153, 97, 101, 183, 255,
					105, 234, 50, 10, 69, 232, 45, 248, 73, 231, 211, 198, 113, 37, 61, 238,
					134, 64, 67, 236, 0, 243, 40, 116, 32, 68, 175, 225, 121, 215, 36, 228,
					99, 109, 140, 89, 139, 223, 15, 190, 204, 138, 107, 23, 133, 9, 13, 17,
					1, 245, 147, 220, 210, 191, 98, 127, 226, 254, 217, 132, 44, 250, 146, 3,
					246, 194, 76, 102, 155, 54, 233, 28, 249, 186, 59, 65, 79, 57, 189, 70,
					142, 119, 205, 196, 124, 111, 104, 38, 14, 224, 27, 21, 88, 151, 143, 80,
					100, 91, 92, 221, 82, 86, 74, 8, 193, 126, 235, 131, 216, 208, 178, 172,
					52, 90, 241, 42, 96, 41, 51, 169, 128, 48, 141, 167, 53, 26, 24, 229,
					114, 18, 184, 20, 137, 150, 227, 181, 179, 87, 30, 60, 156, 162, 58, 2,
					123, 120, 103, 158, 125, 168, 170, 202, 176, 118, 22, 135, 197, 159, 214, 129,
					209, 252, 49, 112, 16, 177, 180, 154, 33, 219, 188, 171, 163, 63, 66, 6,
					161, 71, 149, 47, 110, 182, 207, 25, 12, 253, 173, 213, 95, 81, 206, 93}),
				new(Rotor).New(1777, 717, 36, []byte{
					219, 231, 85, 208, 49, 223, 195, 212, 208, 78, 40, 68, 215, 220, 135, 186,
					187, 223, 137, 221, 164, 120, 102, 154, 205, 82, 122, 98, 90, 128, 187, 44,
					179, 34, 194, 65, 41, 124, 187, 223, 159, 190, 129, 131, 141, 150, 183, 79,
					29, 67, 178, 167, 115, 107, 222, 165, 95, 183, 204, 26, 63, 32, 146, 247,
					216, 139, 247, 60, 98, 66, 115, 137, 66, 53, 103, 167, 97, 111, 34, 171,
					248, 105, 183, 23, 252, 143, 214, 115, 192, 248, 88, 50, 181, 6, 214, 191,
					227, 112, 197, 240, 244, 26, 92, 83, 124, 204, 155, 175, 143, 189, 70, 20,
					244, 2, 101, 32, 25, 10, 185, 151, 245, 151, 91, 44, 150, 20, 237, 152,
					243, 151, 76, 128, 174, 164, 213, 113, 42, 163, 36, 9, 236, 157, 136, 100,
					151, 179, 185, 45, 194, 216, 108, 203, 139, 167, 42, 121, 31, 119, 20, 130,
					87, 17, 41, 174, 88, 122, 10, 2, 35, 55, 27, 19, 130, 212, 121, 93,
					107, 22, 230, 120, 100, 148, 138, 110, 158, 208, 98, 125, 123, 228, 249, 155,
					63, 102, 6, 99, 44, 200, 9, 98, 104, 132, 122, 20, 235, 246, 81, 171,
					92, 173, 117, 228, 93, 41, 58, 60, 117, 73, 202, 213, 245, 102, 182, 207,
					171, 160, 99, 190, 135, 169, 161, 157, 80, 136, 174, 185, 15, 117, 119, 191,
					19, 187, 73, 241, 204, 52, 155, 165, 244, 196, 180, 0, 119, 89, 0, 0}),
				new(Rotor).New(1787, 1222, 731, []byte{
					9, 62, 71, 174, 105, 122, 2, 158, 173, 55, 149, 206, 118, 121, 227, 80,
					227, 228, 96, 189, 43, 187, 31, 249, 76, 210, 40, 74, 61, 15, 37, 69,
					34, 229, 69, 2, 72, 40, 181, 66, 14, 80, 168, 66, 159, 49, 115, 246,
					104, 13, 62, 173, 93, 231, 199, 240, 249, 118, 218, 220, 103, 141, 53, 181,
					12, 213, 151, 195, 194, 162, 231, 185, 20, 76, 201, 178, 72, 152, 131, 2,
					111, 13, 205, 234, 89, 27, 186, 22, 143, 11, 193, 102, 115, 96, 177, 237,
					155, 195, 70, 226, 18, 212, 182, 220, 64, 191, 89, 95, 194, 173, 107, 47,
					171, 144, 63, 15, 83, 166, 38, 170, 34, 64, 202, 32, 83, 138, 221, 68,
					67, 69, 33, 162, 237, 52, 81, 42, 89, 115, 208, 135, 36, 234, 155, 178,
					135, 221, 169, 14, 192, 12, 0, 25, 233, 147, 148, 23, 59, 128, 120, 120,
					8, 236, 106, 66, 99, 81, 16, 124, 7, 220, 55, 25, 172, 221, 143, 92,
					145, 45, 145, 0, 69, 182, 241, 4, 80, 24, 78, 5, 115, 226, 85, 93,
					12, 59, 232, 152, 160, 162, 81, 17, 117, 247, 244, 45, 65, 34, 214, 231,
					151, 176, 81, 16, 109, 3, 67, 19, 108, 96, 70, 141, 158, 10, 206, 73,
					240, 57, 114, 77, 211, 19, 240, 108, 189, 169, 116, 182, 203, 27, 135, 26,
					39, 7, 235, 93, 217, 253, 200, 103, 146, 70, 81, 234, 121, 40, 41, 2}),
				cnter},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tntMachine.engine; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Engine() = %v, want %v", got, tt.want[:8])
			}
		})
	}
}

func TestTntEngine_MaximalStates(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	want, _ := new(big.Int).SetString("7995790102247196352256", 10)
	tests := []struct {
		name string
		want *big.Int
	}{
		{
			name: "tteset1",
			want: want,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.MaximalStates(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.MaximalStates() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_createProFormaMachine(t *testing.T) {
	tests := []struct {
		name string
		want *[]Crypter
	}{
		{
			name: "tcpfm1",
			want: &[]Crypter{proFormaRotors[0], proFormaRotors[1], proFormPermutators[0], proFormaRotors[2], proFormaRotors[3], proFormPermutators[0], proFormaRotors[4], proFormaRotors[5]},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := createProFormaMachine(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("createProFormaMachine() = %v, want %v", got, tt.want)
			}
		})
	}
}
