// This is free and unencumbered software released into the public domain.
// See the UNLICENSE file for details.

package tntengine

import (
	"math/big"
	"reflect"
	"testing"
)

func TestTntEngine_Left(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "ttel1",
			want: tntMachine.left,
		},
	}
	for _, tt := range tests {
		e := tntMachine
		t.Run(tt.name, func(t *testing.T) {
			if got := e.Left(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Left() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_Right(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "tter1",
			want: tntMachine.right,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.Right(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Right() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_CounterKey(t *testing.T) {
	var tntMachine TntEngine
	tests := []struct {
		name string
		key  string
		want string
	}{
		{
			name: "ttec1",
			key:  "SecretKey",
			want: "0f10aa730d813966d2029f2a5e4474a3e0fc1a535daaa53aa96faf601de43ccd",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tntMachine.Init([]byte(tt.key))
			if got := tntMachine.CounterKey(); got != tt.want {
				t.Errorf("TntEngine.CounterKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_Index(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	tntMachine.SetIndex(iCnt)
	tests := []struct {
		name     string
		wantCntr *big.Int
	}{
		{
			name:     "ttei1",
			wantCntr: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if gotCntr := e.Index(); !reflect.DeepEqual(gotCntr, tt.wantCntr) {
				t.Errorf("TntEngine.Index() = %v, want %v", gotCntr, tt.wantCntr)
			}
		})
	}
}

func TestTntEngine_SetIndex(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	type args struct {
		iCnt *big.Int
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		{
			name: "ttesi1",
			args: args{iCnt},
			want: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetIndex(tt.args.iCnt)
			if got := e.Index(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Index() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_SetEngineType(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	type args struct {
		engineType string
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "tteset1",
			args: args{"E"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetEngineType(tt.args.engineType)
			if got := e.engineType; got != tt.args.engineType {
				t.Errorf("TntEngine.SetEngineType() = %v, want %v", got, tt.args.engineType)
			}
		})
	}
}

func TestTntEngine_Engine(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetIndex(BigZero)
	cnter := new(Counter)
	cnter.SetIndex(BigZero)
	tests := []struct {
		name string
		want []Crypter
	}{
		{
			name: "tnte1",
			want: []Crypter{
				new(Rotor).New(1759, 846, 646, []byte{
					34, 187, 75, 155, 171, 24, 241, 133, 151, 63, 105, 132, 209, 125, 107, 79,
					90, 100, 101, 158, 87, 147, 3, 234, 87, 167, 148, 20, 177, 192, 90, 186,
					78, 82, 82, 212, 14, 219, 109, 181, 5, 71, 72, 242, 105, 214, 11, 226,
					100, 195, 141, 248, 42, 32, 107, 135, 207, 182, 63, 172, 179, 190, 182, 10,
					77, 184, 24, 113, 56, 231, 93, 113, 101, 117, 170, 18, 142, 170, 8, 201,
					14, 153, 197, 153, 58, 20, 172, 143, 148, 168, 183, 18, 151, 191, 68, 216,
					139, 35, 236, 211, 2, 49, 224, 43, 187, 71, 73, 182, 178, 85, 78, 221,
					207, 212, 195, 93, 187, 41, 63, 191, 90, 82, 200, 185, 249, 88, 56, 96,
					115, 18, 217, 250, 172, 203, 109, 213, 115, 238, 102, 140, 86, 122, 112, 237,
					205, 107, 203, 53, 30, 78, 78, 104, 51, 123, 143, 240, 9, 235, 57, 193,
					198, 212, 224, 4, 144, 44, 20, 76, 159, 52, 1, 234, 3, 67, 184, 75,
					197, 84, 183, 166, 253, 27, 121, 47, 182, 196, 203, 190, 240, 54, 130, 3,
					181, 88, 95, 165, 172, 147, 70, 65, 17, 195, 67, 158, 103, 144, 196, 43,
					169, 82, 21, 117, 63, 71, 65, 129, 171, 89, 42, 43, 145, 221, 165, 205,
					85, 140, 248, 194, 203, 159, 52, 194, 232, 190, 181, 39, 45, 178, 50, 207,
					171, 201, 1, 245, 171, 83, 74, 138, 88, 96, 45, 93, 177, 189, 32, 76}),
				new(Rotor).New(1753, 86, 996, []byte{
					90, 48, 220, 113, 33, 78, 143, 45, 64, 30, 12, 87, 186, 184, 11, 214,
					89, 0, 34, 137, 102, 187, 23, 12, 237, 246, 73, 84, 183, 186, 225, 205,
					6, 198, 79, 45, 181, 251, 76, 168, 208, 37, 216, 226, 159, 233, 223, 95,
					166, 226, 168, 126, 51, 122, 184, 52, 4, 61, 249, 162, 72, 88, 155, 255,
					25, 124, 41, 247, 37, 68, 123, 0, 122, 132, 122, 222, 221, 138, 253, 29,
					92, 52, 218, 42, 190, 101, 123, 5, 137, 225, 7, 69, 155, 67, 109, 55,
					218, 175, 17, 4, 105, 22, 124, 136, 145, 126, 169, 111, 102, 32, 0, 20,
					205, 92, 18, 126, 192, 145, 3, 50, 213, 60, 131, 46, 92, 25, 71, 130,
					108, 4, 6, 102, 15, 24, 206, 43, 29, 242, 234, 35, 206, 4, 126, 106,
					12, 57, 250, 171, 176, 97, 93, 174, 214, 117, 63, 219, 124, 204, 112, 229,
					167, 207, 185, 174, 15, 211, 95, 239, 203, 188, 222, 71, 98, 197, 239, 229,
					94, 30, 209, 19, 116, 199, 101, 116, 36, 5, 226, 23, 8, 47, 95, 106,
					79, 253, 72, 107, 27, 234, 152, 219, 224, 99, 130, 227, 155, 80, 43, 246,
					152, 165, 252, 79, 57, 107, 84, 192, 79, 99, 211, 180, 96, 184, 227, 66,
					156, 30, 91, 128, 60, 24, 174, 116, 113, 23, 172, 179, 0, 68, 18, 205,
					118, 47, 24, 218, 237, 147, 168, 110, 117, 195, 155, 45, 20, 241, 136, 234}),
				new(Permutator).New(256, []byte{
					87, 246, 168, 173, 32, 234, 218, 95, 208, 51, 107, 45, 154, 58, 92, 160,
					147, 113, 76, 240, 98, 165, 236, 241, 156, 189, 103, 31, 3, 10, 109, 216,
					55, 100, 170, 30, 196, 205, 195, 135, 0, 23, 70, 250, 53, 106, 201, 197,
					20, 47, 192, 44, 172, 125, 59, 200, 141, 12, 132, 19, 17, 207, 97, 193,
					235, 119, 6, 99, 159, 183, 179, 230, 15, 88, 178, 155, 226, 8, 90, 237,
					232, 86, 43, 4, 126, 50, 134, 78, 11, 52, 110, 84, 243, 1, 14, 151,
					204, 111, 136, 149, 139, 83, 91, 169, 146, 206, 104, 118, 101, 48, 67, 21,
					123, 203, 85, 255, 210, 175, 40, 174, 9, 221, 164, 7, 62, 29, 117, 214,
					82, 74, 177, 71, 34, 184, 138, 2, 161, 191, 188, 194, 27, 185, 77, 228,
					162, 108, 229, 251, 41, 105, 54, 60, 130, 137, 122, 153, 231, 75, 171, 245,
					114, 152, 25, 150, 158, 253, 96, 181, 66, 186, 116, 22, 38, 167, 148, 254,
					121, 120, 102, 223, 244, 37, 190, 28, 252, 64, 124, 166, 220, 33, 180, 212,
					209, 187, 140, 26, 16, 46, 5, 219, 115, 143, 163, 238, 94, 142, 157, 133,
					211, 73, 213, 242, 36, 129, 128, 42, 145, 18, 93, 112, 199, 35, 176, 222,
					39, 24, 248, 80, 72, 202, 13, 217, 182, 79, 144, 247, 56, 131, 63, 249,
					233, 69, 198, 89, 49, 127, 61, 227, 65, 68, 81, 239, 57, 224, 225, 215}),
				new(Rotor).New(1789, 1763, 206, []byte{
					134, 79, 180, 19, 168, 15, 97, 104, 7, 48, 101, 90, 103, 59, 131, 75,
					155, 204, 1, 77, 114, 72, 59, 190, 100, 211, 177, 20, 101, 75, 240, 133,
					80, 187, 121, 38, 252, 181, 53, 45, 17, 213, 239, 29, 42, 145, 218, 142,
					135, 156, 143, 196, 39, 213, 151, 24, 86, 97, 98, 144, 247, 118, 232, 24,
					6, 191, 110, 111, 112, 191, 133, 51, 106, 222, 98, 108, 196, 102, 65, 86,
					73, 72, 90, 169, 86, 242, 89, 222, 254, 45, 175, 24, 145, 35, 240, 43,
					3, 23, 10, 9, 92, 184, 251, 40, 5, 103, 147, 174, 26, 181, 153, 175,
					62, 26, 169, 7, 6, 75, 214, 214, 132, 18, 102, 125, 135, 66, 59, 197,
					90, 75, 81, 144, 244, 253, 119, 32, 194, 55, 176, 121, 12, 1, 55, 132,
					203, 77, 98, 18, 228, 0, 196, 109, 108, 7, 197, 107, 22, 59, 147, 211,
					68, 48, 44, 93, 216, 182, 195, 100, 245, 119, 94, 36, 208, 4, 165, 208,
					138, 211, 121, 213, 227, 103, 216, 27, 131, 13, 48, 108, 63, 8, 152, 5,
					89, 232, 191, 134, 172, 187, 190, 163, 217, 56, 84, 211, 220, 112, 224, 170,
					251, 0, 205, 73, 50, 223, 69, 47, 9, 251, 216, 145, 178, 1, 122, 222,
					240, 137, 118, 2, 245, 33, 12, 237, 0, 166, 76, 235, 108, 103, 112, 105,
					147, 57, 160, 73, 14, 105, 199, 151, 108, 58, 150, 162, 108, 9, 190, 16}),
				new(Rotor).New(1783, 1026, 1575, []byte{
					225, 162, 209, 130, 160, 85, 215, 76, 41, 175, 72, 238, 39, 179, 139, 25,
					144, 189, 78, 56, 46, 232, 204, 68, 140, 184, 166, 207, 206, 134, 119, 51,
					105, 74, 249, 125, 251, 249, 121, 168, 54, 105, 44, 15, 245, 78, 139, 87,
					208, 36, 72, 33, 227, 16, 63, 234, 28, 143, 238, 21, 86, 240, 132, 60,
					121, 3, 250, 99, 151, 195, 251, 176, 79, 247, 173, 52, 67, 198, 125, 52,
					42, 30, 166, 196, 9, 204, 160, 48, 240, 214, 176, 126, 122, 151, 97, 238,
					86, 81, 164, 239, 115, 6, 214, 109, 188, 237, 67, 145, 108, 156, 133, 24,
					192, 243, 21, 171, 192, 201, 242, 251, 196, 115, 193, 57, 154, 155, 105, 153,
					28, 133, 173, 164, 100, 5, 105, 247, 67, 144, 123, 105, 88, 158, 188, 169,
					163, 171, 114, 182, 42, 91, 164, 147, 47, 179, 21, 77, 240, 162, 103, 190,
					198, 89, 15, 85, 29, 104, 203, 197, 250, 110, 213, 228, 75, 150, 174, 149,
					141, 245, 236, 226, 209, 49, 106, 23, 26, 138, 250, 162, 5, 69, 76, 150,
					196, 232, 143, 22, 133, 81, 20, 155, 169, 5, 187, 253, 75, 12, 175, 189,
					6, 60, 93, 236, 144, 106, 118, 207, 56, 184, 60, 108, 228, 9, 155, 112,
					209, 104, 65, 208, 170, 107, 166, 148, 87, 36, 247, 147, 217, 197, 12, 200,
					94, 39, 28, 23, 116, 102, 34, 70, 92, 211, 103, 103, 195, 187, 25, 29}),
				new(Permutator).New(256, []byte{
					87, 246, 168, 173, 32, 234, 218, 95, 208, 51, 107, 45, 154, 58, 92, 160,
					147, 113, 76, 240, 98, 165, 236, 241, 156, 189, 103, 31, 3, 10, 109, 216,
					55, 100, 170, 30, 196, 205, 195, 135, 0, 23, 70, 250, 53, 106, 201, 197,
					20, 47, 192, 44, 172, 125, 59, 200, 141, 12, 132, 19, 17, 207, 97, 193,
					235, 119, 6, 99, 159, 183, 179, 230, 15, 88, 178, 155, 226, 8, 90, 237,
					232, 86, 43, 4, 126, 50, 134, 78, 11, 52, 110, 84, 243, 1, 14, 151,
					204, 111, 136, 149, 139, 83, 91, 169, 146, 206, 104, 118, 101, 48, 67, 21,
					123, 203, 85, 255, 210, 175, 40, 174, 9, 221, 164, 7, 62, 29, 117, 214,
					82, 74, 177, 71, 34, 184, 138, 2, 161, 191, 188, 194, 27, 185, 77, 228,
					162, 108, 229, 251, 41, 105, 54, 60, 130, 137, 122, 153, 231, 75, 171, 245,
					114, 152, 25, 150, 158, 253, 96, 181, 66, 186, 116, 22, 38, 167, 148, 254,
					121, 120, 102, 223, 244, 37, 190, 28, 252, 64, 124, 166, 220, 33, 180, 212,
					209, 187, 140, 26, 16, 46, 5, 219, 115, 143, 163, 238, 94, 142, 157, 133,
					211, 73, 213, 242, 36, 129, 128, 42, 145, 18, 93, 112, 199, 35, 176, 222,
					39, 24, 248, 80, 72, 202, 13, 217, 182, 79, 144, 247, 56, 131, 63, 249,
					233, 69, 198, 89, 49, 127, 61, 227, 65, 68, 81, 239, 57, 224, 225, 215}),
				new(Rotor).New(1787, 1066, 1264, []byte{
					109, 135, 237, 186, 69, 95, 73, 191, 55, 45, 168, 9, 186, 115, 29, 118,
					174, 31, 89, 133, 105, 44, 25, 82, 222, 193, 86, 9, 59, 79, 238, 155,
					187, 71, 75, 25, 132, 119, 177, 229, 10, 229, 146, 110, 129, 68, 134, 75,
					245, 229, 222, 59, 58, 86, 89, 114, 50, 242, 229, 248, 102, 202, 252, 195,
					199, 138, 24, 157, 0, 219, 1, 25, 143, 67, 114, 47, 192, 204, 153, 207,
					108, 81, 67, 23, 133, 97, 153, 237, 148, 10, 24, 8, 145, 214, 87, 162,
					195, 197, 102, 168, 192, 167, 146, 69, 123, 207, 223, 111, 187, 165, 185, 63,
					30, 231, 144, 33, 103, 240, 126, 221, 196, 113, 162, 183, 99, 44, 208, 48,
					38, 249, 29, 204, 97, 53, 101, 110, 233, 228, 6, 158, 136, 233, 203, 147,
					188, 183, 171, 157, 105, 202, 129, 199, 202, 172, 21, 3, 3, 219, 201, 201,
					180, 184, 150, 11, 144, 45, 202, 244, 11, 44, 201, 33, 43, 183, 166, 247,
					77, 152, 214, 171, 153, 225, 134, 243, 242, 62, 42, 175, 129, 10, 14, 122,
					210, 216, 15, 186, 37, 19, 124, 11, 3, 168, 111, 164, 217, 181, 94, 185,
					248, 94, 22, 89, 112, 55, 27, 125, 35, 108, 126, 209, 131, 198, 165, 108,
					59, 108, 215, 45, 250, 74, 250, 189, 105, 65, 77, 208, 157, 235, 176, 115,
					253, 200, 42, 76, 99, 201, 144, 242, 14, 182, 74, 216, 121, 114, 223, 140}),
				new(Rotor).New(1777, 453, 176, []byte{
					174, 38, 238, 2, 141, 38, 228, 155, 172, 40, 62, 164, 94, 138, 184, 197,
					245, 45, 235, 124, 34, 43, 108, 230, 184, 16, 223, 123, 87, 95, 198, 50,
					188, 1, 102, 156, 237, 11, 125, 35, 243, 38, 137, 222, 250, 237, 203, 209,
					126, 12, 212, 171, 243, 240, 130, 37, 92, 1, 195, 207, 222, 253, 15, 15,
					129, 198, 86, 89, 13, 31, 141, 165, 212, 210, 46, 30, 226, 226, 36, 246,
					127, 110, 95, 15, 112, 171, 87, 218, 106, 255, 22, 242, 252, 201, 130, 91,
					148, 133, 227, 81, 146, 84, 154, 117, 13, 13, 198, 65, 156, 172, 223, 88,
					155, 241, 216, 186, 119, 198, 104, 89, 141, 135, 15, 166, 246, 228, 103, 106,
					195, 175, 235, 51, 255, 114, 161, 64, 61, 80, 102, 109, 152, 204, 6, 202,
					157, 108, 29, 236, 28, 39, 134, 130, 188, 78, 146, 226, 244, 59, 38, 120,
					81, 158, 103, 109, 208, 64, 2, 232, 136, 185, 87, 208, 62, 141, 124, 58,
					19, 40, 35, 212, 222, 78, 113, 6, 111, 203, 236, 247, 92, 68, 203, 51,
					102, 85, 33, 39, 79, 58, 255, 92, 243, 115, 19, 158, 222, 43, 207, 242,
					237, 226, 122, 104, 55, 248, 197, 116, 205, 20, 59, 43, 26, 173, 92, 77,
					220, 5, 26, 77, 200, 55, 89, 81, 124, 72, 189, 20, 113, 139, 235, 91,
					214, 249, 68, 86, 216, 204, 113, 33, 190, 247, 174, 190, 140, 101, 254, 205}),
				cnter},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tntMachine.engine; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Engine() = %v, want %v", got, tt.want[:8])
			}
		})
	}
}

func TestTntEngine_MaximalStates(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	want, _ := new(big.Int).SetString("7995790102247196352256", 10)
	tests := []struct {
		name string
		want *big.Int
	}{
		{
			name: "tteset1",
			want: want,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.MaximalStates(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.MaximalStates() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_createProFormaMachine(t *testing.T) {
	tests := []struct {
		name string
		want *[]Crypter
	}{
		{
			name: "tcpfm1",
			want: &[]Crypter{Rotor1, Rotor2, Permutator1, Rotor3, Rotor4, Permutator1, Rotor5, Rotor6},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := createProFormaMachine(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("createProFormaMachine() = %v, want %v", got, tt.want)
			}
		})
	}
}
