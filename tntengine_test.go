// This is free and unencumbered software released into the public domain.
// See the UNLICENSE file for details.

package tntengine

import (
	"math/big"
	"reflect"
	"testing"
)

func TestTntEngine_Left(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "ttel1",
			want: tntMachine.left,
		},
	}
	for _, tt := range tests {
		e := tntMachine
		t.Run(tt.name, func(t *testing.T) {
			if got := e.Left(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Left() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_Right(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetEngineType("E")
	tntMachine.BuildCipherMachine()
	tests := []struct {
		name string
		want chan CipherBlock
	}{
		{
			name: "tter1",
			want: tntMachine.right,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.Right(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Right() = %v, want %v", got, tt.want)
			}
		})
	}
	var blk CipherBlock
	tntMachine.left <- blk
	<-tntMachine.right
}

func TestTntEngine_CounterKey(t *testing.T) {
	var tntMachine TntEngine
	tests := []struct {
		name string
		key  string
		want string
	}{
		{
			name: "ttec1",
			key:  "SecretKey",
			want: "30a7c225e88daa83416dee1970dc58b81f0c3771d6eb801ce23b49439357cc16",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tntMachine.Init([]byte(tt.key))
			if got := tntMachine.CounterKey(); got != tt.want {
				t.Errorf("TntEngine.CounterKey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_Index(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	tntMachine.SetIndex(iCnt)
	tests := []struct {
		name     string
		wantCntr *big.Int
	}{
		{
			name:     "ttei1",
			wantCntr: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if gotCntr := e.Index(); !reflect.DeepEqual(gotCntr, tt.wantCntr) {
				t.Errorf("TntEngine.Index() = %v, want %v", gotCntr, tt.wantCntr)
			}
		})
	}
}

func TestTntEngine_SetIndex(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	iCnt, _ := new(big.Int).SetString("1234567890", 10)
	type args struct {
		iCnt *big.Int
	}
	tests := []struct {
		name string
		args args
		want *big.Int
	}{
		{
			name: "ttesi1",
			args: args{iCnt},
			want: iCnt,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetIndex(tt.args.iCnt)
			if got := e.Index(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Index() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestTntEngine_SetEngineType(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	type args struct {
		engineType string
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "tteset1",
			args: args{"E"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			e.SetEngineType(tt.args.engineType)
			if got := e.engineType; got != tt.args.engineType {
				t.Errorf("TntEngine.SetEngineType() = %v, want %v", got, tt.args.engineType)
			}
		})
	}
}

func TestTntEngine_Engine(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	tntMachine.SetIndex(BigZero)
	cnter := new(Counter)
	cnter.SetIndex(BigZero)
	tests := []struct {
		name string
		want []Crypter
	}{
		{
			name: "tnte1",
			want: []Crypter{
				new(Rotor).New(1783, 1662, 1252, []byte{
					30, 130, 220, 108, 62, 237, 1, 80, 176, 47, 168, 200, 126, 19, 50, 12,
					220, 72, 108, 35, 54, 114, 117, 97, 95, 202, 163, 7, 251, 114, 108, 121,
					129, 154, 165, 148, 100, 164, 175, 161, 83, 89, 160, 8, 134, 137, 61, 27,
					20, 56, 246, 101, 44, 173, 162, 143, 153, 181, 198, 107, 64, 78, 65, 229,
					135, 197, 117, 112, 60, 218, 90, 201, 221, 138, 180, 65, 33, 55, 132, 47,
					1, 215, 221, 162, 89, 114, 5, 110, 174, 20, 237, 55, 106, 95, 50, 231,
					4, 160, 88, 96, 139, 167, 54, 18, 71, 42, 245, 23, 109, 238, 28, 210,
					121, 66, 252, 203, 31, 88, 78, 152, 197, 65, 11, 20, 130, 171, 225, 216,
					178, 38, 138, 228, 81, 188, 128, 139, 116, 252, 2, 219, 129, 197, 32, 6,
					109, 65, 105, 36, 110, 202, 78, 157, 186, 175, 156, 130, 170, 9, 148, 171,
					238, 122, 16, 219, 102, 231, 85, 23, 116, 65, 62, 10, 201, 73, 245, 159,
					23, 204, 178, 110, 71, 198, 221, 151, 74, 215, 56, 69, 3, 106, 26, 48,
					140, 180, 35, 233, 40, 176, 180, 18, 76, 177, 105, 179, 30, 117, 146, 6,
					123, 146, 74, 136, 109, 83, 79, 23, 0, 217, 108, 66, 4, 232, 7, 15,
					65, 110, 54, 159, 246, 0, 40, 216, 23, 84, 100, 191, 9, 25, 6, 110,
					36, 182, 17, 27, 185, 186, 176, 47, 229, 209, 131, 125, 57, 182, 60, 0}),
				new(Rotor).New(1777, 173, 229, []byte{
					2, 177, 204, 212, 201, 148, 151, 180, 22, 3, 229, 75, 36, 40, 236, 94,
					29, 78, 70, 172, 97, 40, 161, 75, 60, 69, 65, 64, 29, 227, 69, 38,
					71, 3, 76, 205, 45, 110, 126, 69, 254, 168, 217, 245, 163, 212, 83, 254,
					252, 240, 188, 115, 119, 68, 255, 208, 155, 116, 167, 67, 92, 188, 56, 39,
					121, 69, 0, 146, 17, 94, 186, 38, 51, 201, 15, 142, 104, 8, 24, 214,
					238, 23, 215, 234, 100, 176, 191, 117, 232, 228, 162, 174, 231, 88, 3, 69,
					163, 2, 31, 145, 119, 158, 26, 189, 32, 10, 126, 164, 103, 211, 244, 87,
					175, 172, 49, 97, 43, 140, 56, 220, 174, 157, 190, 68, 159, 141, 237, 16,
					84, 117, 126, 67, 96, 81, 175, 184, 93, 160, 98, 8, 112, 250, 21, 72,
					116, 190, 58, 141, 161, 202, 198, 235, 84, 86, 150, 240, 139, 230, 47, 206,
					113, 124, 218, 221, 236, 244, 169, 102, 168, 68, 197, 32, 73, 173, 100, 150,
					63, 168, 247, 249, 213, 26, 217, 112, 137, 65, 122, 104, 229, 201, 147, 196,
					63, 102, 6, 99, 44, 200, 9, 98, 104, 132, 122, 20, 235, 246, 81, 171,
					92, 173, 117, 228, 93, 41, 58, 60, 117, 73, 202, 213, 245, 102, 4, 98,
					153, 169, 147, 41, 47, 105, 45, 6, 202, 151, 72, 80, 216, 189, 58, 156,
					140, 88, 195, 80, 66, 151, 120, 138, 130, 128, 58, 198, 139, 76, 0, 0}),
				new(Permutator).New(256, []byte{
					194, 81, 214, 128, 97, 87, 204, 230, 15, 78, 80, 91, 181, 25, 83, 196,
					155, 102, 53, 127, 18, 210, 221, 236, 44, 107, 118, 32, 24, 160, 237, 124,
					109, 157, 137, 22, 185, 33, 245, 112, 26, 48, 76, 49, 208, 195, 235, 90,
					174, 168, 220, 21, 178, 164, 158, 207, 143, 190, 186, 6, 159, 121, 86, 202,
					103, 255, 10, 27, 189, 89, 64, 238, 17, 100, 98, 163, 241, 19, 249, 229,
					133, 156, 138, 246, 176, 136, 171, 134, 55, 148, 95, 211, 84, 123, 197, 231,
					8, 232, 30, 161, 205, 61, 130, 150, 36, 66, 242, 79, 218, 28, 191, 42,
					34, 217, 139, 167, 54, 45, 47, 113, 3, 120, 243, 106, 182, 154, 93, 56,
					215, 104, 131, 52, 46, 213, 142, 16, 233, 198, 7, 252, 57, 12, 209, 82,
					94, 74, 129, 146, 4, 67, 192, 169, 239, 73, 69, 247, 70, 200, 183, 132,
					234, 126, 38, 110, 105, 62, 254, 206, 151, 162, 253, 65, 115, 37, 88, 147,
					71, 149, 23, 58, 0, 111, 122, 223, 63, 119, 35, 172, 219, 31, 29, 228,
					184, 225, 216, 203, 125, 240, 114, 5, 77, 68, 152, 39, 173, 179, 108, 166,
					222, 135, 227, 212, 250, 144, 72, 85, 116, 170, 244, 60, 96, 101, 13, 43,
					141, 14, 41, 193, 180, 51, 92, 1, 226, 11, 153, 201, 165, 224, 199, 2,
					40, 59, 9, 140, 117, 177, 251, 50, 20, 248, 145, 187, 175, 99, 75, 188}),
				new(Rotor).New(1753, 1359, 167, []byte{
					143, 79, 227, 185, 169, 41, 151, 216, 210, 201, 208, 239, 133, 255, 113, 91,
					121, 89, 159, 70, 144, 47, 43, 137, 31, 79, 65, 219, 61, 191, 20, 114,
					254, 205, 58, 195, 161, 19, 174, 119, 182, 9, 88, 13, 218, 93, 153, 106,
					85, 119, 126, 109, 72, 29, 254, 111, 19, 215, 235, 37, 109, 144, 187, 212,
					158, 140, 69, 66, 2, 219, 120, 19, 106, 130, 111, 73, 135, 172, 100, 170,
					102, 211, 96, 67, 94, 59, 90, 135, 0, 68, 177, 191, 27, 82, 247, 244,
					9, 234, 246, 235, 2, 15, 173, 119, 156, 226, 33, 226, 229, 71, 255, 46,
					141, 116, 23, 154, 231, 161, 230, 174, 212, 139, 52, 82, 214, 216, 168, 248,
					217, 218, 203, 158, 166, 250, 48, 153, 224, 12, 109, 231, 170, 116, 40, 112,
					85, 104, 22, 234, 18, 64, 124, 111, 22, 147, 129, 133, 134, 157, 5, 189,
					222, 45, 122, 28, 138, 31, 182, 241, 171, 183, 171, 11, 61, 116, 249, 253,
					161, 227, 48, 179, 26, 234, 173, 30, 230, 232, 46, 158, 242, 232, 105, 188,
					68, 67, 241, 19, 119, 240, 84, 172, 163, 235, 120, 10, 227, 52, 4, 82,
					167, 248, 169, 252, 209, 201, 18, 16, 98, 245, 152, 31, 159, 198, 115, 83,
					83, 46, 177, 165, 147, 161, 223, 11, 255, 227, 182, 242, 178, 62, 141, 32,
					95, 86, 18, 63, 158, 130, 182, 123, 126, 41, 228, 0, 0, 0, 0, 0}),
				new(Rotor).New(1759, 1598, 273, []byte{
					195, 191, 52, 142, 93, 64, 181, 46, 54, 239, 200, 252, 65, 50, 29, 38,
					174, 33, 224, 31, 55, 19, 108, 171, 254, 187, 158, 81, 54, 99, 198, 190,
					227, 35, 247, 86, 95, 100, 107, 22, 245, 87, 137, 86, 189, 248, 1, 123,
					120, 249, 244, 153, 134, 157, 160, 41, 137, 248, 228, 35, 170, 107, 177, 19,
					251, 193, 188, 117, 142, 222, 59, 174, 123, 239, 23, 149, 217, 30, 81, 200,
					174, 101, 58, 135, 210, 141, 147, 153, 21, 67, 162, 16, 164, 205, 97, 140,
					183, 189, 205, 183, 30, 141, 177, 45, 145, 132, 200, 58, 81, 17, 145, 144,
					212, 165, 217, 15, 144, 224, 74, 237, 104, 98, 137, 196, 9, 154, 44, 118,
					90, 210, 201, 48, 179, 106, 113, 42, 255, 251, 39, 178, 235, 177, 62, 93,
					67, 199, 223, 234, 31, 118, 75, 3, 14, 23, 242, 89, 153, 124, 191, 46,
					0, 245, 59, 155, 76, 15, 148, 103, 95, 246, 237, 229, 144, 160, 127, 117,
					7, 121, 199, 6, 26, 4, 171, 149, 211, 162, 38, 67, 120, 14, 214, 121,
					46, 81, 195, 190, 107, 129, 248, 22, 123, 29, 127, 111, 253, 13, 43, 244,
					1, 178, 204, 34, 207, 248, 237, 125, 97, 84, 171, 129, 225, 95, 26, 199,
					46, 160, 90, 23, 155, 119, 100, 254, 32, 153, 14, 19, 215, 16, 240, 143,
					155, 9, 182, 85, 255, 93, 207, 40, 155, 49, 99, 95, 0, 0, 0, 0}),
				new(Permutator).New(256, []byte{
					194, 81, 214, 128, 97, 87, 204, 230, 15, 78, 80, 91, 181, 25, 83, 196,
					155, 102, 53, 127, 18, 210, 221, 236, 44, 107, 118, 32, 24, 160, 237, 124,
					109, 157, 137, 22, 185, 33, 245, 112, 26, 48, 76, 49, 208, 195, 235, 90,
					174, 168, 220, 21, 178, 164, 158, 207, 143, 190, 186, 6, 159, 121, 86, 202,
					103, 255, 10, 27, 189, 89, 64, 238, 17, 100, 98, 163, 241, 19, 249, 229,
					133, 156, 138, 246, 176, 136, 171, 134, 55, 148, 95, 211, 84, 123, 197, 231,
					8, 232, 30, 161, 205, 61, 130, 150, 36, 66, 242, 79, 218, 28, 191, 42,
					34, 217, 139, 167, 54, 45, 47, 113, 3, 120, 243, 106, 182, 154, 93, 56,
					215, 104, 131, 52, 46, 213, 142, 16, 233, 198, 7, 252, 57, 12, 209, 82,
					94, 74, 129, 146, 4, 67, 192, 169, 239, 73, 69, 247, 70, 200, 183, 132,
					234, 126, 38, 110, 105, 62, 254, 206, 151, 162, 253, 65, 115, 37, 88, 147,
					71, 149, 23, 58, 0, 111, 122, 223, 63, 119, 35, 172, 219, 31, 29, 228,
					184, 225, 216, 203, 125, 240, 114, 5, 77, 68, 152, 39, 173, 179, 108, 166,
					222, 135, 227, 212, 250, 144, 72, 85, 116, 170, 244, 60, 96, 101, 13, 43,
					141, 14, 41, 193, 180, 51, 92, 1, 226, 11, 153, 201, 165, 224, 199, 2,
					40, 59, 9, 140, 117, 177, 251, 50, 20, 248, 145, 187, 175, 99, 75, 188}),
				new(Rotor).New(1789, 60, 444, []byte{
					139, 183, 101, 78, 5, 174, 94, 15, 206, 125, 202, 48, 228, 146, 191, 224,
					132, 235, 224, 60, 18, 57, 21, 103, 237, 61, 115, 105, 9, 46, 125, 96,
					19, 40, 234, 94, 162, 36, 155, 156, 228, 195, 26, 147, 119, 67, 78, 183,
					246, 231, 222, 145, 6, 190, 126, 78, 213, 77, 221, 175, 94, 244, 14, 196,
					166, 126, 139, 161, 110, 91, 143, 84, 22, 40, 124, 127, 212, 186, 12, 175,
					47, 100, 51, 163, 40, 64, 136, 160, 59, 18, 97, 216, 114, 62, 102, 118,
					70, 82, 105, 130, 64, 229, 198, 45, 10, 175, 198, 174, 59, 57, 118, 174,
					211, 87, 35, 169, 97, 25, 153, 98, 87, 171, 154, 125, 103, 167, 209, 96,
					206, 201, 54, 167, 29, 77, 24, 240, 196, 206, 244, 226, 135, 145, 69, 194,
					142, 6, 78, 61, 115, 225, 120, 92, 92, 171, 5, 49, 141, 86, 118, 82,
					87, 87, 201, 254, 122, 165, 23, 190, 161, 131, 138, 255, 177, 250, 177, 154,
					178, 27, 215, 71, 226, 129, 215, 30, 219, 151, 203, 130, 218, 53, 150, 26,
					237, 26, 6, 180, 128, 163, 241, 54, 219, 225, 169, 211, 190, 116, 88, 130,
					201, 77, 90, 146, 17, 214, 212, 98, 25, 187, 111, 4, 166, 134, 216, 103,
					241, 182, 204, 169, 192, 213, 235, 193, 185, 79, 25, 134, 92, 242, 23, 156,
					112, 29, 156, 71, 34, 167, 226, 172, 189, 103, 46, 45, 193, 165, 15, 12}),
				new(Rotor).New(1787, 1560, 448, []byte{
					1, 231, 247, 14, 230, 11, 211, 240, 233, 133, 9, 85, 30, 165, 132, 181,
					230, 128, 150, 84, 163, 65, 32, 207, 27, 245, 48, 151, 254, 76, 147, 189,
					121, 171, 186, 122, 133, 184, 244, 77, 227, 118, 172, 190, 89, 70, 160, 67,
					76, 62, 80, 108, 159, 174, 215, 154, 249, 159, 151, 214, 229, 230, 143, 64,
					252, 102, 182, 195, 134, 193, 95, 230, 79, 57, 10, 138, 206, 169, 42, 8,
					65, 48, 208, 141, 152, 35, 64, 170, 179, 66, 156, 195, 142, 196, 77, 49,
					229, 214, 159, 170, 254, 134, 105, 75, 248, 214, 206, 136, 166, 137, 104, 248,
					193, 198, 61, 52, 237, 162, 85, 174, 162, 217, 115, 144, 255, 151, 58, 157,
					225, 7, 170, 132, 114, 144, 195, 154, 188, 44, 252, 219, 162, 227, 103, 185,
					41, 227, 198, 46, 36, 252, 63, 164, 53, 94, 10, 75, 141, 236, 245, 194,
					49, 231, 90, 41, 127, 89, 251, 101, 236, 208, 234, 166, 106, 110, 158, 4,
					74, 202, 191, 161, 67, 209, 51, 38, 212, 80, 0, 66, 14, 42, 255, 143,
					156, 19, 236, 250, 66, 22, 153, 120, 91, 121, 229, 96, 98, 97, 187, 218,
					231, 243, 78, 110, 200, 6, 149, 254, 238, 172, 221, 49, 69, 177, 199, 14,
					56, 191, 119, 48, 95, 152, 134, 79, 47, 76, 168, 242, 40, 37, 172, 53,
					7, 180, 164, 26, 13, 2, 121, 222, 168, 135, 185, 244, 103, 154, 236, 5}),
				cnter},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tntMachine.engine; !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.Engine() = %v, want %v", got, tt.want[:8])
			}
		})
	}
}

func TestTntEngine_MaximalStates(t *testing.T) {
	var tntMachine TntEngine
	tntMachine.Init([]byte("SecretKey"))
	want, _ := new(big.Int).SetString("7995790102247196352256", 10)
	tests := []struct {
		name string
		want *big.Int
	}{
		{
			name: "tteset1",
			want: want,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := tntMachine
			if got := e.MaximalStates(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("TntEngine.MaximalStates() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_createProFormaMachine(t *testing.T) {
	tests := []struct {
		name string
		want *[]Crypter
	}{
		{
			name: "tcpfm1",
			want: &[]Crypter{proFormaRotors[0], proFormaRotors[1], proFormPermutators[0], proFormaRotors[2], proFormaRotors[3], proFormPermutators[0], proFormaRotors[4], proFormaRotors[5]},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := createProFormaMachine(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("createProFormaMachine() = %v, want %v", got, tt.want)
			}
		})
	}
}
